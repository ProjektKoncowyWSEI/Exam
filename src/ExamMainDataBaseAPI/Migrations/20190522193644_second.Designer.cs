// <auto-generated />
using System;
using ExamMainDataBaseAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ExamMainDataBaseAPI.Migrations
{
    [DbContext(typeof(ExamQuestionsDbContext))]
    [Migration("20190522193644_second")]
    partial class second
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ExamMainDataBaseAPI.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer1")
                        .IsRequired()
                        .HasColumnName("Answer");

                    b.Property<int?>("QuestionsId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionsId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("ExamMainDataBaseAPI.Models.AnswersType", b =>
                {
                    b.Property<string>("AnswerType")
                        .HasMaxLength(50);

                    b.HasKey("AnswerType")
                        .HasName("PK_AnswerType");

                    b.ToTable("AnswersType");
                });

            modelBuilder.Entity("ExamMainDataBaseAPI.Models.QuestionAnswer", b =>
                {
                    b.Property<int>("AnswerId")
                        .HasColumnName("AnswerID");

                    b.Property<int>("QuestionId")
                        .HasColumnName("QuestionID");

                    b.HasKey("AnswerId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionAnswer");
                });

            modelBuilder.Entity("ExamMainDataBaseAPI.Models.Questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("Image");

                    b.Property<string>("Question")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("ExamMainDataBaseAPI.Models.Answer", b =>
                {
                    b.HasOne("ExamMainDataBaseAPI.Models.Questions")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionsId");
                });

            modelBuilder.Entity("ExamMainDataBaseAPI.Models.QuestionAnswer", b =>
                {
                    b.HasOne("ExamMainDataBaseAPI.Models.Answer", "Answer")
                        .WithMany("QuestionAnswer")
                        .HasForeignKey("AnswerId")
                        .HasConstraintName("FK_QuestionAnswer_Answer");

                    b.HasOne("ExamMainDataBaseAPI.Models.Questions", "Question")
                        .WithMany("QuestionAnswer")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_QuestionAnswer_Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
